[tool.poetry]
name = "back"
package-mode = false
version = "0.1.0"
description = ""
authors = ["Luis Guilherme de Souza Munhoz"]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.10"
fastapi = "==0.75.1"
sqlalchemy = "==1.4.35"
uvicorn = { extras = ["standard"], version = "==0.17.6" }
python-dotenv = "==0.20.0"
strawberry-graphql = { extras = ["fastapi"], version = "==0.114.0" }
httpx = "^0.27.0"
requests = "^2.32.3"


[tool.poetry.group.dev.dependencies]
strawberry-graphql = { extras = ["debug-server"], version = "==0.114.0" }
mypy = "^1.10.0"
ruff = "^0.8.4"


[tool.poetry.group.test.dependencies]
pytest = "^8.3.4"
coverage = "^7.6.10"
pytest-cov = "^6.0.0"

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
  ".git",
  ".git-rewrite",
  ".ipynb_checkpoints",
  ".mypy_cache",
  ".pytest_cache",
  ".pytype",
  ".ruff_cache",
  ".tox",
  "*venv",
  ".vscode",
  "_pypackages_",
  "_build",
  "buck-out",
  "build",
  "backend-metrics",
  "site-packages",
  "/tests/",
  "/migrations/",
  "/tmp/*",
  "/usr/*",
]

# Same as Black.
line-length = 88
indent-width = 4

# Assume Python 3.10 syntax.
target-version = "py310"

[tool.ruff.lint]

select = [
  "A",
  "ARG001",
  "B",
  "BLE",
  "C",
  "C4",
  "C901",
  "DJ",
  "E",
  "F",
  "FBT",
  "G",
  "I",
  "LOG",
  "N",
  "PD",
  "PL",
  "PERF",
  "PIE",
  "Q",
  "RET",
  "RSE",
  "RUF",
  "SIM",
  "SLF",
  "T20",
  "UP",
  "W",
  "YTT",
]

exclude = ["__tests__/*"]
ignore = ["D212", "D203", "D213", "D407", "B008", "A002", "A001"]

# Allow fix for all enabled rules (when --fix) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "_[a-zA-Z]+"
[tool.ruff.lint.mccabe]
# Flag errors ( C901 ) whenever the complexity level exceeds 15.
max-complexity = 15

[tool.ruff.lint.per-file-ignores]
"tests_*.py" = ["ALL"]
"dist/*" = ["ALL"]

[tool.ruff.lint.pylint]
max-branches = 15
max-args = 10

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = true

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the docstring-code-format setting is
# enabled.
docstring-code-line-length = "dynamic"


[tool.mypy]
plugins = ["pydantic.mypy"]
no_implicit_reexport = true
disallow_untyped_calls = true
check_untyped_defs = true
warn_unused_configs = true
warn_redundant_casts = true
strict_equality = true
disallow_incomplete_defs = true
disallow_any_generics = true
warn_return_any = true
python_version = "3.10"
follow_imports = "skip"
show_error_codes = true
ignore_missing_imports = true
files = [
  "configs",
  "metadata",
  "repositories",
  "routers",
  "schemas",
  "services",
]
disallow_untyped_defs = true
allow_redefinition = false
error_summary = true
no_implicit_optional = true

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true

[tool.pytest.ini_options]
pythonpath = ["."]
testpaths = ["__tests__"]

[tool.coverage.run]
omit = ["__mocks__/*", "__tests__/*", "**/__init__.py", "main.py"]
source = [
  "configs",
  "core",
  "dependencies",
  "models",
  "repositories",
  "routers",
  "schemas",
  "services",
]
branch = true
command_line = "-m pytest"

[tool.coverage.report]
fail_under = 80
# Regexes for lines to exclude from consideration
exclude_also = [
  # Don't complain about missing debug-only code:
  "def __repr__",
  "if self\\.debug",

  # Don't complain if tests don't hit defensive assertion code:
  "raise AssertionError",
  "raise NotImplementedError",

  # Don't complain if non-runnable code isn't run:
  "if 0:",
  "if __name__ == .__main__.:",

  # Don't complain about abstract methods, they aren't run:
  "@(abc\\.)?abstractmethod",
  "# pragma no-cover",
]

ignore_errors = true

[tool.coverage.paths]
source = ["."]

[tool.coverage.html]
title = "Coverage report"
directory = "test-results"

[tool.coverage.xml]
title = "Coverage report"
output = "test-results/coverage.xml"


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
