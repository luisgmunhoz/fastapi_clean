[tool.poetry]
name = "back"
version = "0.1.0"
description = ""
authors = ["Luis Guilherme de Souza Munhoz"]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.10"
fastapi = "==0.75.1"
sqlalchemy = "==1.4.35"
uvicorn = { extras = ["standard"], version = "==0.17.6" }
python-dotenv = "==0.20.0"
strawberry-graphql = { extras = ["fastapi"], version = "==0.114.0" }


[tool.poetry.group.dev.dependencies]
pre-commit = "==2.18.1"
pytest = "==7.1.2"
pytest-cov = "==3.0.0"
black = "==22.3.0"
strawberry-graphql = { extras = ["debug-server"], version = "==0.114.0" }
isort = "^5.13.2"

[tool.flake8]
max-line-length = 88
ignore = ['E741', 'W503']
extend-ignore = "E203"
extend-exclude = [
  "dist",
  "build",
  ".*/",
  "__pycache__",
  "test*.py",
  "backend-metrics/*",
  "test*/",
]
max-complexity = 15

[tool.mypy]
no_implicit_reexport = true
disallow_untyped_calls = true
check_untyped_defs = true
warn_unused_configs = true
warn_redundant_casts = true
strict_equality = true
strict_concatenate = true
disallow_incomplete_defs = true
disallow_any_generics = true
warn_return_any = true
python_version = "3.10"
follow_imports = "skip"
show_error_codes = true
ignore_missing_imports = true
files = [
  "configs",
  "metadata",
  "repositories",
  "routers",
  "schemas",
  "services",
]
disallow_untyped_defs = true


[tool.pytest.ini_options]
pythonpath = ["."]
testpaths = ["__tests__"]


[tool.black]
line-length = 88

[tool.isort]
profile = "black"
src_paths = [
  "configs",
  "core",
  "dependencies",
  "models",
  "repositories",
  "routers",
  "schemas",
  "services",
]
virtual_env = ".venv"


[tool.coverage.run]
omit = ["__mocks__/*", "__tests__/*", "**/__init__.py", "main.py"]
source = [
  "configs",
  "core",
  "dependencies",
  "models",
  "repositories",
  "routers",
  "schemas",
  "services",
]
branch = true
command_line = "-m pytest"

[tool.coverage.report]
fail_under = 80
# Regexes for lines to exclude from consideration
exclude_also = [
  # Don't complain about missing debug-only code:
  "def __repr__",
  "if self\\.debug",

  # Don't complain if tests don't hit defensive assertion code:
  "raise AssertionError",
  "raise NotImplementedError",

  # Don't complain if non-runnable code isn't run:
  "if 0:",
  "if __name__ == .__main__.:",

  # Don't complain about abstract methods, they aren't run:
  "@(abc\\.)?abstractmethod",
  "# pragma no-cover",
]

ignore_errors = true

[tool.coverage.paths]
source = ["."]

[tool.coverage.html]
title = "Coverage report"
directory = "test-results"

[tool.coverage.xml]
title = "Coverage report"
output = "test-results/coverage.xml"


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
